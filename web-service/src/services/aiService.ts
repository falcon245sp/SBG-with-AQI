import OpenAI from \"openai\";\nimport Anthropic from '@anthropic-ai/sdk';\nimport { EducationalStandard, RigorAssessment, AIAnalysisResult } from '../types';\n\n// AI service initialization\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || \"demo_key\"\n});\n\nconst grok = new OpenAI({ \n  baseURL: \"https://api.x.ai/v1\", \n  apiKey: process.env.XAI_API_KEY || \"demo_key\"\n});\n\nconst DEFAULT_MODEL_STR = \"claude-sonnet-4-20250514\";\nconst anthropic = new Anthropic({\n  apiKey: process.env.ANTHROPIC_API_KEY || \"demo_key\",\n});\n\nexport class AIService {\n  async analyzeQuestion(\n    questionText: string,\n    context: string,\n    jurisdictions: string[],\n    focusStandards?: string[]\n  ): Promise<{ grok: AIAnalysisResult }> {\n    console.log('Starting AI analysis for question:', questionText.substring(0, 100));\n    \n    try {\n      // For now, use only Grok for processing (can be extended later)\n      const grokResult = await this.analyzeWithGrok(questionText, context, jurisdictions, focusStandards);\n      \n      return {\n        grok: grokResult\n      };\n    } catch (error) {\n      console.error('AI analysis failed:', error);\n      throw error;\n    }\n  }\n\n  private async analyzeWithGrok(\n    questionText: string,\n    context: string,\n    jurisdictions: string[],\n    focusStandards?: string[]\n  ): Promise<AIAnalysisResult> {\n    const startTime = Date.now();\n    \n    try {\n      const prompt = this.generateAnalysisPrompt(questionText, context, jurisdictions, focusStandards);\n      \n      const response = await grok.chat.completions.create({\n        model: \"grok-beta\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are an expert educational analyst specializing in standards alignment and cognitive rigor assessment.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        temperature: 0.3,\n        max_tokens: 2000\n      });\n\n      const processingTime = Date.now() - startTime;\n      const rawResponse = response.choices[0]?.message?.content || '';\n      \n      // Parse the response to extract standards and rigor assessment\n      const parsed = this.parseGrokResponse(rawResponse);\n      \n      return {\n        rigor: parsed.rigor,\n        standards: parsed.standards,\n        confidence: parsed.confidence,\n        processingTime,\n        jsonResponse: parsed.jsonResponse\n      };\n    } catch (error) {\n      console.error('Grok analysis failed:', error);\n      throw new Error(`Grok analysis failed: ${error.message}`);\n    }\n  }\n\n  private generateAnalysisPrompt(\n    questionText: string,\n    context: string,\n    jurisdictions: string[],\n    focusStandards?: string[]\n  ): string {\n    const jurisdictionStr = jurisdictions.join(', ');\n    const focusStandardsStr = focusStandards?.length ? \n      `\\n\\nFocus particularly on these standards: ${focusStandards.join(', ')}` : '';\n    \n    return `Analyze this educational question for standards alignment and cognitive rigor:\n\nQuestion: ${questionText}\nContext: ${context}\nJurisdictions: ${jurisdictionStr}${focusStandardsStr}\n\nProvide your analysis in this JSON format:\n{\n  \"standards\": [\n    {\n      \"code\": \"standard code\",\n      \"description\": \"what this standard covers\",\n      \"jurisdiction\": \"jurisdiction name\",\n      \"gradeLevel\": \"grade level if applicable\",\n      \"subject\": \"subject area\"\n    }\n  ],\n  \"rigor\": {\n    \"level\": \"mild|medium|spicy\",\n    \"dokLevel\": \"DOK level\",\n    \"justification\": \"explanation for rigor level\",\n    \"confidence\": 0.8\n  }\n}\n\nRigor levels:\n- mild: Basic recall, recognition, simple application\n- medium: Multi-step processes, interpretation, analysis\n- spicy: Synthesis, evaluation, complex reasoning, real-world application`;\n  }\n\n  private parseGrokResponse(response: string): {\n    standards: EducationalStandard[];\n    rigor: RigorAssessment;\n    confidence: number;\n    jsonResponse: any;\n  } {\n    try {\n      // Try to extract JSON from the response\n      const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n      if (!jsonMatch) {\n        throw new Error('No JSON found in response');\n      }\n      \n      const parsed = JSON.parse(jsonMatch[0]);\n      \n      return {\n        standards: parsed.standards || [],\n        rigor: parsed.rigor || {\n          level: 'mild',\n          dokLevel: 'DOK 1',\n          justification: 'Unable to determine rigor level',\n          confidence: 0.1\n        },\n        confidence: parsed.rigor?.confidence || 0.5,\n        jsonResponse: parsed\n      };\n    } catch (error) {\n      console.error('Failed to parse Grok response:', error);\n      \n      // Return default values if parsing fails\n      return {\n        standards: [],\n        rigor: {\n          level: 'mild',\n          dokLevel: 'DOK 1', \n          justification: 'Analysis failed - using default values',\n          confidence: 0.1\n        },\n        confidence: 0.1,\n        jsonResponse: null\n      };\n    }\n  }\n}\n\nexport const aiService = new AIService();\n