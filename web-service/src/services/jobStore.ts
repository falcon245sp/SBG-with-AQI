import { ProcessingJob, ProcessingResult } from '../types';\n\n// In-memory job storage (replace with DynamoDB for AWS deployment)\nexport class JobStore {\n  private jobs = new Map<string, ProcessingJob>();\n  private results = new Map<string, ProcessingResult>();\n\n  async saveJob(job: ProcessingJob): Promise<void> {\n    this.jobs.set(job.jobId, { ...job });\n  }\n\n  async getJob(jobId: string): Promise<ProcessingJob | null> {\n    return this.jobs.get(jobId) || null;\n  }\n\n  async updateJobStatus(\n    jobId: string, \n    status: ProcessingJob['status'], \n    progress: number, \n    currentStep: string,\n    errorMessage?: string\n  ): Promise<void> {\n    const job = this.jobs.get(jobId);\n    if (job) {\n      job.status = status;\n      job.progress = progress;\n      job.currentStep = currentStep;\n      if (errorMessage) {\n        job.errorMessage = errorMessage;\n      }\n      if (status === 'completed' || status === 'failed') {\n        job.completedAt = new Date();\n      }\n      this.jobs.set(jobId, job);\n    }\n  }\n\n  async saveJobResults(jobId: string, results: ProcessingResult): Promise<void> {\n    this.results.set(jobId, results);\n  }\n\n  async getJobResults(jobId: string): Promise<ProcessingResult | null> {\n    return this.results.get(jobId) || null;\n  }\n\n  // Cleanup old jobs (useful for in-memory storage)\n  async cleanupOldJobs(maxAgeHours: number = 24): Promise<void> {\n    const cutoffTime = new Date(Date.now() - maxAgeHours * 60 * 60 * 1000);\n    \n    for (const [jobId, job] of this.jobs.entries()) {\n      if (job.startedAt < cutoffTime) {\n        this.jobs.delete(jobId);\n        this.results.delete(jobId);\n      }\n    }\n  }\n\n  // Get job statistics\n  async getJobStats(): Promise<{\n    total: number;\n    byStatus: Record<string, number>;\n  }> {\n    const jobs = Array.from(this.jobs.values());\n    const byStatus: Record<string, number> = {\n      submitted: 0,\n      processing: 0,\n      completed: 0,\n      failed: 0\n    };\n    \n    jobs.forEach(job => {\n      byStatus[job.status] = (byStatus[job.status] || 0) + 1;\n    });\n    \n    return {\n      total: jobs.length,\n      byStatus\n    };\n  }\n}\n