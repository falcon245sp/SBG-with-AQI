import express from 'express';\nimport multer from 'multer';\nimport { v4 as uuidv4 } from 'uuid';\nimport { ProcessDocumentRequest, ProcessingJob } from '../types';\nimport { DocumentProcessor } from '../services/documentProcessor';\nimport { JobStore } from '../services/jobStore';\nimport { validateApiKey } from '../middleware/auth';\n\nconst router = express.Router();\nconst documentProcessor = new DocumentProcessor();\nconst jobStore = new JobStore();\n\n// Configure multer for file uploads\nconst upload = multer({\n  dest: 'uploads/',\n  limits: {\n    fileSize: 50 * 1024 * 1024, // 50MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    const allowedTypes = [\n      'application/pdf',\n      'application/msword',\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      'application/vnd.google-apps.document'\n    ];\n    \n    if (allowedTypes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Invalid file type. Only PDF, Word, and Google Docs are allowed.'));\n    }\n  }\n});\n\n// Submit document for processing\nrouter.post('/process', validateApiKey, upload.single('document'), async (req, res) => {\n  try {\n    const file = req.file;\n    if (!file) {\n      return res.status(400).json({\n        error: 'missing_file',\n        message: 'No file uploaded'\n      });\n    }\n\n    const { customerId, jurisdictions, focusStandards, callbackUrl } = req.body;\n    \n    if (!customerId || !jurisdictions) {\n      return res.status(400).json({\n        error: 'missing_parameters',\n        message: 'customerId and jurisdictions are required'\n      });\n    }\n\n    // Parse jurisdictions and focus standards\n    const parsedJurisdictions = typeof jurisdictions === 'string' \n      ? jurisdictions.split(',').map((j: string) => j.trim())\n      : jurisdictions;\n    \n    let parsedFocusStandards: string[] = [];\n    if (focusStandards) {\n      parsedFocusStandards = typeof focusStandards === 'string'\n        ? focusStandards.split(',').map((s: string) => s.trim()).filter(Boolean)\n        : focusStandards;\n    }\n\n    // Create processing job\n    const jobId = uuidv4();\n    const job: ProcessingJob = {\n      jobId,\n      customerId,\n      fileName: file.originalname,\n      fileSize: file.size,\n      mimeType: file.mimetype,\n      jurisdictions: parsedJurisdictions,\n      focusStandards: parsedFocusStandards,\n      callbackUrl,\n      status: 'submitted',\n      progress: 0,\n      currentStep: 'queued',\n      startedAt: new Date()\n    };\n\n    // Store job\n    await jobStore.saveJob(job);\n\n    // Start processing asynchronously\n    documentProcessor.processDocument(jobId, file, job).catch(error => {\n      console.error(`Processing failed for job ${jobId}:`, error);\n      job.status = 'failed';\n      job.errorMessage = error.message;\n      jobStore.saveJob(job);\n    });\n\n    res.status(202).json({\n      jobId,\n      status: 'submitted',\n      estimatedCompletionTime: new Date(Date.now() + 5 * 60 * 1000).toISOString(), // 5 minutes\n      message: 'Document submitted for processing'\n    });\n  } catch (error) {\n    console.error('Error submitting document:', error);\n    res.status(500).json({\n      error: 'processing_error',\n      message: 'Failed to submit document for processing'\n    });\n  }\n});\n\n// Check processing status\nrouter.get('/status/:jobId', validateApiKey, async (req, res) => {\n  try {\n    const { jobId } = req.params;\n    const job = await jobStore.getJob(jobId);\n    \n    if (!job) {\n      return res.status(404).json({\n        error: 'job_not_found',\n        message: 'Job not found'\n      });\n    }\n\n    res.json({\n      jobId: job.jobId,\n      status: job.status,\n      progress: job.progress,\n      currentStep: job.currentStep,\n      startedAt: job.startedAt.toISOString(),\n      completedAt: job.completedAt?.toISOString(),\n      errorMessage: job.errorMessage\n    });\n  } catch (error) {\n    console.error('Error fetching job status:', error);\n    res.status(500).json({\n      error: 'status_error',\n      message: 'Failed to fetch job status'\n    });\n  }\n});\n\n// Get processing results\nrouter.get('/results/:jobId', validateApiKey, async (req, res) => {\n  try {\n    const { jobId } = req.params;\n    const job = await jobStore.getJob(jobId);\n    \n    if (!job) {\n      return res.status(404).json({\n        error: 'job_not_found',\n        message: 'Job not found'\n      });\n    }\n\n    if (job.status !== 'completed') {\n      return res.status(202).json({\n        error: 'processing_incomplete',\n        message: 'Processing not yet complete',\n        status: job.status\n      });\n    }\n\n    const results = await jobStore.getJobResults(jobId);\n    if (!results) {\n      return res.status(404).json({\n        error: 'results_not_found',\n        message: 'Results not found'\n      });\n    }\n\n    res.json(results);\n  } catch (error) {\n    console.error('Error fetching results:', error);\n    res.status(500).json({\n      error: 'results_error',\n      message: 'Failed to fetch results'\n    });\n  }\n});\n\nexport { router as apiRoutes };\n